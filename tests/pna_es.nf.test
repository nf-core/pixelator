nextflow_pipeline {

    name "Test PNA pipeline with experiment summary"
    script "../main.nf"

    tag "pixelator"
    tag "pixelator/pna"

    test("small") {

        when {
            params {

                pipelines_testdata_base_path           = "https://raw.githubusercontent.com/nf-core/test-datasets/pixelator/"
                input                                  = "$pipelines_testdata_base_path/samplesheet/pna/samplesheet_pna_es.csv"
                input_basedir                          = "$pipelines_testdata_base_path/testdata/pna/"
                outdir                                 = "$outputDir"

                pna_graph_component_size_min_threshold = 100
                skip_experiment_summary                = false
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = []

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pixelator_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() }
            )
        }
    }

    test("small - stub") {

        options "-stub"
        tag "stub"

        when {
            params {
                pipelines_testdata_base_path = "$projectDir/../nf-core-pixelator-datasets/"
                input                        = "$pipelines_testdata_base_path/samplesheet/pna/samplesheet_pna_es.csv"
                input_basedir                = "$pipelines_testdata_base_path/testdata/pna/"
                outdir                       = "$outputDir"
                skip_experiment_summary      = false
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = []
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() }
            )
        }
    }
}
