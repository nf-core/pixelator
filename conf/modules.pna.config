/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {

    withName: PIXELATOR_PNA_AMPLICON {
        ext.args   = {
            [
                "--design ${meta.design}",
                params.pna_amplicon_mismatches ? "--mismatches ${params.pna_amplicon_mismatches}" : '',
                params.pna_amplicon_remove_polyg ? "--remove-polyg" : '',
                params.pna_amplicon_quality_cutoff ? "--quality-cutoff ${params.pna_amplicon_quality_cutoff}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'amplicon/*.amplicon.fq.zst',
                saveAs: { params.save_pna_amplicon_reads || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }

    withName: PIXELATOR_PNA_DEMUX {
        ext.args   = {
            [
                params.pna_demux_mismatches instanceof Integer ? "--mismatches ${params.pna_demux_mismatches}" : '',
                params.pna_demux_output_chunk_reads ? "--output-chunk-reads ${params.pna_demux_output_chunk_reads}" : '',
                params.pna_demux_output_max_chunks != null ? "--output-max-chunks ${params.pna_demux_output_max_chunks}" : '',
                "--strategy ${params.pna_demux_strategy}",
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'demux/*.parquet',
                saveAs: { params.save_pna_demux_parquet || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'demux/*.demux.passed.fq.zst',
                saveAs: { params.save_pna_demux_passed_reads || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'demux/*.demux.failed.fq.zst',
                saveAs: { params.save_pna_demux_failed_reads || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }

    withName: PIXELATOR_PNA_COLLAPSE {
        ext.args   = {
            [
                params.pna_collapse_mismatches ? "--mismatches ${params.pna_collapse_mismatches}" : '',
                params.pna_collapse_algorithm ? "--algorithm ${params.pna_collapse_algorithm}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'collapse/*.parquet',
                saveAs: { params.save_collapsed_reads || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }

    withName: PIXELATOR_PNA_GRAPH {
        ext.args   = {
            [
                params.pna_graph_multiplet_recovery ? "--multiplet-recovery" : '',
                params.pna_graph_leiden_iterations ? "--leiden-iterations ${params.pna_graph_leiden_iterations}" : '',
                params.pna_graph_initial_stage_leiden_resolution ? "--initial-stage-leiden-resolution ${params.pna_graph_initial_stage_leiden_resolution}" : '',
                params.pna_graph_refinement_stage_leiden_resolution ? "--refinement-stage-leiden-resolution ${params.pna_graph_refinement_stage_leiden_resolution}" : '',
                params.pna_graph_min_count ? "--min-count ${params.pna_graph_min_count}" : '',
                params.pna_graph_min_component_size_in_refinement ? "--min-component-size-in-refinement ${params.pna_graph_min_component_size_in_refinement}" : '',
                params.pna_graph_max_refinement_recursion_depth ? "--max-refinement-recursion-depth ${params.pna_graph_max_refinement_recursion_depth}" : '',
                params.pna_graph_initial_stage_max_edges_to_remove ? "--initial-stage-max-edges-to-remove ${params.pna_graph_initial_stage_max_edges_to_remove}" : '',
                params.pna_graph_refinement_stage_max_edges_to_remove ? "--refinement-stage-max-edges-to-remove ${params.pna_graph_refinement_stage_max_edges_to_remove}" : '',
                params.pna_graph_initial_stage_max_edges_to_remove_relative ? "--initial-stage-max-edges-to-remove-relative ${params.pna_graph_initial_stage_max_edges_to_remove_relative}" : '',
                params.pna_graph_refinement_stage_max_edges_to_remove_relative ? "--refinement-stage-max-edges-to-remove-relative ${params.pna_graph_refinement_stage_max_edges_to_remove_relative}" : '',
                params.pna_graph_graph_min_component_size_to_prune ? "--min-component-size-to-prune ${params.pna_graph_graph_min_component_size_to_prune}" : '',
                params.pna_graph_component_size_min_threshold ? "--component-size-min-threshold ${params.pna_graph_component_size_min_threshold}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'graph/*.pxl',
                saveAs: { params.save_pna_graph_pixelfile || params.save_all ? it : null },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }

    withName: PIXELATOR_PNA_DENOISE {
        ext.when   = { !params.skip_denoise }
        ext.args   = {
            [
                params.pna_denoise_run_one_core_graph_denoising ? "--run-one-core-graph-denoising" : '',
                params.pna_denoise_pval_threshold ? "--pval-threshold ${params.pna_denoise_pval_threshold}" : '',
                params.pna_denoise_inflate_factor ? "--inflate-factor ${params.pna_denoise_inflate_factor}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'denoise/*.pxl',
                saveAs: {
                    if (params.save_pna_denoise_pixelfile || params.save_pna_all) {
                        return it
                    }
                    return null
                },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_pna_all ? it : null },
            ],
        ]
    }



    withName: PIXELATOR_PNA_ANALYSIS {
        ext.when   = { !params.skip_analysis }
        ext.args   = {
            [
                params.pna_analysis_compute_proximity ? "--compute-proximity" : '',
                params.pna_analysis_proximity_nbr_of_permutations ? "--proximity-nbr-of-permutations ${params.pna_analysis_proximity_nbr_of_permutations}" : '',
                params.pna_analysis_compute_k_cores ? "--compute-k-cores" : '',
                params.pna_analysis_compute_svd_var_explained ? "--compute-svd-var-explained" : '',
                params.pna_analysis_svd_nbr_of_pivots ? "--svd-nbr-of-pivots ${params.pna_analysis_svd_nbr_of_pivots}" : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'analysis/*.pxl',
                saveAs: {
                    if (params.save_pna_analysis_pixelfile || params.save_all) {
                        return it
                    }
                    return null
                },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }

    withName: PIXELATOR_PNA_LAYOUT {
        ext.when   = { !params.skip_layout }
        ext.args   = {
            [
                params.pna_layout_no_node_marker_counts ? "--no-node-marker-counts" : '',
                params.pna_layout_layout_algorithm ? "--layout-algorithm ${params.pna_layout_layout_algorithm} " : '',
                params.pna_layout_pmds_pivots ? "--pmds-pivots ${params.pna_layout_pmds_pivots} " : '',
                params.pna_layout_wpmds_k ? "--wpmds-k ${params.pna_layout_wpmds_k} " : '',
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'layout/*.pxl',
                saveAs: {
                    // Trim the annotate directory prefix from the output name
                    new File(it).name
                },
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null },
            ],
        ]
    }
}
