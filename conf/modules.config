/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {

    publishDir = [
        path: { "${params.outdir}/pixelator" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: "PIXELATOR.*" {
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> (filename.endsWith('.log') || filename.equals('versions.yml')) ? null : filename }
            ],
            [
                path: { "${params.outdir}/pixelator/logs" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]

        if (params.pixelator_container) {
            container = params.pixelator_container
        }
    }

    withName: PIXELATOR_LIST_OPTIONS {
        publishDir = [ enabled: false ]
    }

    withName: "CAT_FASTQ" {
        publishDir = [ enabled: false ]
    }


    withName: PIXELATOR_COLLECT_METADATA {
        publishDir = [
            [
                path: { "${params.outdir}/pipeline_info" },
                mode: params.publish_dir_mode,
                pattern: 'metadata.json',
                saveAs: { filename ->
                    def timestamp  = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
                    "metadata_${timestamp}.json"
                }
            ],
            [
                path: { "${params.outdir}/pixelator/logs" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    // use explicit (params.my_option instanceof Integer) checks to avoid issues with 0 evaluating false
    // since most pixelator flags do accept zero as a value

    withName: PIXELATOR_AMPLICON {
        ext.args = { ["--design ${meta.design}"].join(' ').trim() }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'amplicon/*.merged.{fq,fastq}.gz',
                saveAs: { (params.save_amplicon_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_QC {
        // Options for pixelator preqc
        ext.args = {
            [
                "--design ${meta.design}",
                (params.trim_front instanceof Integer)? "--trim-front ${params.trim_front}": '',
                (params.trim_tail instanceof Integer) ? "--trim-tail ${params.trim_tail}": '',
                (params.max_length instanceof Integer) ? "--max-length ${params.max_length}": '',
                (params.min_length instanceof Integer) ? "--min-length ${params.min_length}": '',
                (params.max_n_bases instanceof Integer) ? "--max-n-bases ${params.max_n_bases}": '',
                (params.avg_qual instanceof Integer)? "--avg-qual ${params.avg_qual}": '',
                params.dedup ? "--dedup": '',
                params.remove_polyg ? "--remove_polyg": '',
            ].join(' ').trim()
        }

        // Options for pixelator adapterqc
        ext.args2 = { [
                "--design ${meta.design}",
                params.adapterqc_mismatches ? "--mismatches ${params.adapterqc_mismatches}": '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '{preqc,adapterqc}/*.processed.{fq,fastq}.gz',
                saveAs: { (params.save_qc_passed_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '{preqc,adapterqc}/*.failed.{fq,fastq}.gz',
                saveAs: { (params.save_qc_failed_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.qc-report.html',
                saveAs: { (params.save_all) ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_DEMUX {
        ext.args = {
            [
                "--design ${meta.design}",
                (params.demux_mismatches != null) ? "--mismatches ${params.demux_mismatches}": '',
                (params.demux_min_length instanceof Integer) ? "--mismatches ${params.demux_min_length}": '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'demux/*.processed-*.{fq,fastq}.gz',
                saveAs: { (params.save_demux_processed_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'demux/*failed.{fq,fastq}.gz',
                saveAs: { (params.save_demux_failed_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_COLLAPSE {
        ext.args = {
            [
                params.markers_ignore ? "--markers_ignore ${params.markers_ignore}":
                params.algorithm ? "--algorithm ${params.algorithm}": '',
                params.max_neighbours ? "--max-neighbours ${params.max_neighbours}": '',
                params.collapse_mismatches ? "--mismatches ${params.collapse_mismatches}": '',
                params.collapse_min_count ? "--min-count ${params.collapse_min_count}": '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'collapse/*.collapsed.parquet',
                saveAs: { (params.save_collapsed_reads || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_GRAPH {
        ext.args = {
            [
                params.multiplet_recovery ? "--multiplet-recovery" : '',
                params.graph_min_count ? "--min-count ${params.graph_min_count}" : '',
                params.graph_max_refinement_recursion_depth ? "--max-refinement-recursion-depth ${params.graph_max_refinement_recursion_depth}" : '',
                params.graph_max_edges_to_split ? "--max-edges-to-split ${params.graph_max_edges_to_split}" : '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'graph/*edgelist.parquet',
                saveAs: { (params.save_edgelist || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_ANNOTATE {
        ext.args = {
            [
                (params.min_size instanceof Integer) ? "--min-size ${params.min_size}" : '',
                (params.max_size instanceof Integer) ? "--max-size ${params.max_size}" : '',
                params.dynamic_filter ? "--dynamic-filter ${params.dynamic_filter}" : '',
                params.aggregate_calling ? "--aggregate-calling" : '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'annotate/*.dataset.pxl',
                saveAs: {
                    if (params.skip_layout && params.skip_analysis) {
                        // Trim the annotate directory prefix from the output name
                        return new File(it).name
                    }
                    else if (params.save_annotate_dataset || params.save_all) {
                        return it
                    }
                    return null
                }
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { (params.save_raw_component_metrics || params.save_all) ? it : null }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_ANALYSIS {
        ext.when = { !params.skip_analysis }
        ext.args = {
            [
                params.compute_polarization ? "--compute-polarization" : '',
                params.compute_colocalization ? "--compute-colocalization" : '',
                params.use_full_bipartite ? "--use-full-bipartite " : '',
                params.polarization_min_marker_count ? "--polarization-min-marker-count ${params.polarization_min_marker_count}" : '',
                params.polarization_transformation ? "--polarization-transformation ${params.polarization_transformation}" : '',
                params.colocalization_transformation ? "--colocalization-transformation ${params.colocalization_transformation}" : '',
                params.polarization_n_permutations ? "--polarization-n-permutations ${params.polarization_n_permutations}" : '',
                (params.colocalization_neighbourhood_size instanceof Integer) ? "--colocalization-neighbourhood-size ${params.colocalization_neighbourhood_size}" : '',
                (params.colocalization_n_permutations instanceof Integer) ? "--colocalization-n-permutations ${params.colocalization_n_permutations}" : '',
                (params.colocalization_min_region_count instanceof Integer) ? "--colocalization-min-region-count ${params.colocalization_min_region_count}" : '',
                (params.colocalization_min_marker_count instanceof Integer) ? "--colocalization-min-marker-count ${params.colocalization_min_marker_count}" : ''
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'analysis/*.dataset.pxl',
                saveAs: {
                    if (params.skip_layout) {
                        // Trim the annotate directory prefix from the output name
                        return new File(it).name
                    }
                    else if (params.save_analysis_dataset || params.save_all) {
                        return it
                    }
                    return null
                }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_LAYOUT {
        ext.when = { !params.skip_layout }
        ext.args = {
            [
                params.no_node_marker_counts ? "--no-node-marker-counts" : '',
                params.layout_algorithm ? "--layout-algorithm ${params.layout_algorithm} " : '',
            ].join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'layout/*.dataset.pxl',
                saveAs: {
                    // Trim the annotate directory prefix from the output name
                    new File(it).name
                }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }

    withName: PIXELATOR_REPORT {
        ext.when = { !params.skip_report }
        publishDir = [
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: 'report/*.html',
                saveAs: {
                    // Trim the annotate directory prefix from the output name
                    new File(it).name
                }
            ],
            [
                path: { "${params.outdir}/pixelator/logs/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/pixelator" },
                mode: params.publish_dir_mode,
                pattern: '**/*.{report,meta}.json',
                saveAs: { params.save_json || params.save_all ? it : null }
            ]
        ]
    }
}
