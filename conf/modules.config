/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_AGGREGATE_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [ "--mode aggregate" ].join(' ')
    }

    withName: "PIXELATOR.*" {
        ext.singularity_pull_docker_container =  true

        publishDir = [
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> (filename.endsWith('.log') || filename.equals('versions.yml')) ? null : filename }
            ],
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
        if (params.pixelator_container_source == 'ghcr' && params.pixelator_tag) {
            container = "ghcr.io/pixelgentechnologies/pixelator:${params.pixelator_tag}"
        }
        if (params.pixelator_container_source == 'aws-ecr' && params.pixelator_tag) {
            container = "890888997283.dkr.ecr.eu-north-1.amazonaws.com/pixelator:${params.pixelator_tag}"
        }
    }

    withName: RENAME_READS {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        ]
    }

    withName: RENAME_MATRICES {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        ]
    }

    withName: PIXELATOR_PREQC {
        ext.args = [
            params.trim_front ? "--trim-front ${params.trim_front}": '',
            params.trim_tail ? "--trim-tail ${params.trim_tail}": '',
            params.max_length ? "--max-length ${params.max_length}": '',
            params.min_length ? "--min-length ${params.min_length}": '',
            params.max_n_bases ? "--max-n-bases ${params.max_n_bases}": '',
            params.avg_qual ? "--avg-qual ${params.avg_qual}": '',
            params.dedup ? "--dedup ${params.dedup}": '',
            params.remove_polyg ? "--remove_polyg ${params.remove_polyg}": '',
        ].join(' ').trim()
    }

    withName: PIXELATOR_ADAPTERQC {
        ext.args = [
            params.adapterqc_mismatches ? "--mismatches ${params.adapterqc_mismatches}": '',
            params.pbs1 ? "--pbs1 ${params.pbs1}": '',
            params.pbs2 ? "--pbs1 ${params.pbs2}": '',
        ].join(' ').trim()
    }


    withName: PIXELATOR_DEMUX {
        ext.args = [
            params.demux_mismatches ? "--mismatches ${params.demux_mismatches}": '',
            params.demux_min_length ? "--mismatches ${params.demux_min_length}": '',
        ].join(' ').trim()
    }

    withName: PIXELATOR_COLLAPSE {
        ext.args = [
            params.algorithm ? "--algorithm ${params.algorithm}": '',
            params.upi1_start ? "--upi1-start  ${params.upi1_start}": '',
            params.upi1_end ? "--upi1-end  ${params.upi1_end}": '',
            params.upi2_start ? "--upi2-start  ${params.upi2_start}": '',
            params.upi2_end ? "--upi2-end  ${params.upi2_end}": '',
            params.umi1_start ? "--umi1-start  ${params.umi1_start}": '',
            params.umi1_end ? "--umi1-end  ${params.umi1_end}": '',
            params.umi2_start ? "--umi2-start  ${params.umi2_start}": '',
            params.umi2_end ? "--umi2-end  ${params.umi2_end}": '',
            params.neighbours ? "--neighbours ${params.neighbours}": '',
            params.collapse_mismatches ? "--mismatches ${params.collapse_mismatches}": '',
            params.collapse_min_count ? "--min-count ${params.collapse_min_count}": '',
            params.use_counts ? "--use-counts": '',
        ].join(' ').trim()
    }

    withName: PIXELATOR_CLUSTER {
        ext.args = [
            params.max_size_recover ? "--max-size-recover ${params.max_size_recover}" : '',
            params.big_clusters_recover ? "--big-clusters-recover": '',
            params.condition ? "--condition ${params.condition}" : '',
            params.cluster_min_count ? "--min-count ${params.cluster_min_count}" : '',
        ].join(' ').trim()
    }

    withName: PIXELATOR_ANNOTATE {
        ext.args = [
            params.min_size ? "--min-size ${params.min_size}" : '',
            params.min_num_markers ? "--min-num-markers ${params.min_num_markers}" : "",
            params.max_size ? "--max-size ${params.max_size}" : '',
            params.dynamic_filter ? "--dynamic_filter" : '',
            params.no_cell_type_assignments ? "--no-cell-type-assignments" : '',
            params.no_cell_type_cluster ? "--no-cell-type-cluster" : '', 
            params.no_doublet_calling ? "--no-doublet-calling" : '',
        ].join(' ').trim()
    }

    withName: PIXELATOR_AGGREGATE {
        ext.args = [
        ].join(' ').trim()
    }

    withName: PIXELATOR_ANALYSIS {
        ext.args = [
            params.compute_polarization ? "--compute-polarization" : '',
            params.compute_colocalization ? "--compute-colocalization" : '',
            params.compute_coabundance ? "--compute-coabundance" : '',
            params.use_full_bipartite ? "--use-full-bipartite " : '',
            params.normalization ? "--normalization" : '',
            params.pvalue_cutoff ? "--pvalue-cutoff ${params.pvalue_cutoff}" : '',
        ].join(' ').trim()
    }

    withName: COLLECT_METADATA {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
        ]

        if (params.pixelator_container_source == 'ghcr' && params.pixelator_tag) {
            container = "ghcr.io/pixelgentechnologies/pixelator:${params.pixelator_tag}"
        }
        if (params.pixelator_container_source == 'aws-ecr' && params.pixelator_tag) {
            container = "890888997283.dkr.ecr.eu-north-1.amazonaws.com/pixelator:${params.pixelator_tag}"
        }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
