import nextflow.Nextflow

params {
    project_name = null
    outdir = "s3://pixelgen-nf-output/pixelator-results/${params.project_name}"
}


def pixelgenOutputDir(workflow, params) {
    // Function used to generate the an output path on the form:
    // <nf-core-pixelator version>-<pixelator version>/<date>-<sha>/

    pipelineVersion = workflow.manifest.version
    pixelatorVersion = params.pixelator_tag ?: "unknown"
    today = new Date().format("yyyy-MM-dd")

    samplesheet = Nextflow.file(params.input)
    samplesheetSha = samplesheet.bytes.digest('sha-1')
    parameterSha = params.sort().toString().digest('sha-1')
    combinedSha = "${samplesheetSha}${parameterSha}".digest("sha-1").substring(0, 6)

    return "nf-core-pixelator-${pipelineVersion}/pixelator-${pixelatorVersion}/${today}-${combinedSha}"
}

process {

    publishDir = [
        path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_AGGREGATE_CHECK {
        publishDir = [
            path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "PIXELATOR.*" {
        publishDir = [
            [
                path: {
                    "${params.outdir}/${pixelgenOutputDir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}"
                    },
                mode: params.publish_dir_mode,
                saveAs: { filename -> (filename.endsWith('.log') || filename.equals('versions.yml')) ? null : filename }
            ],
            [
                path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }

    withName: COLLECT_METADATA {
        publishDir = [
            path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${pixelgenOutputDir(workflow, params)}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
