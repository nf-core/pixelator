/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/pixelator Nextflow config file for Pixelgen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    config_profile_description = 'AWS Batch Profile for Pixelgen Technologies'
    config_profile_contact = 'Florian De Temmerman (@fbdtemme)'
    config_profile_url = 'https://aws.amazon.com/batch/'
}

// Load default parameters
includeConfig 'params.config'

// Load base.config by default for all pipelines
includeConfig 'base.config'


/*
----------------------------------------------------------------------------------------
    Set pixelgen AWS Batch executor specific variables
----------------------------------------------------------------------------------------
*/
params {
    project_name               = null
    pixelator_container_source = 'aws-ecr'
    pixelator_tag              = '0.9.0'
    testdata_root              = "s3://pixelgen-nf-input"
    outdir                     = "s3://pixelgen-nf-output/pixelator-results/${params.project_name}"

    awsqueue                   = "nf-batch-spot"
    awsregion                  = 'eu-north-1'
    awscli                     = '/home/ec2-user/micromamba/bin/aws'
}


// The S3 path for intermediate files
workDir = 's3://pixelgen-nf-work/work'

aws.region = params.awsregion
aws.batch.cliPath = params.awsqueue


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/pixelator'
    author          = 'Pixelgen Technologies AB'
    homePage        = 'https://github.com/PixelgenTechnologies/nf-core-pixelator'
    description     = 'Pipeline for analysis of Molecular Pixelation assays'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.5'
    version         = '0.9.0'
    doi             = ''
}

// Override defaults with new custom pixelgen settings
process {
    publishDir = [
        path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_AGGREGATE_CHECK {
        publishDir = [
            path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "PIXELATOR.*" {
        publishDir = [
            [
                path: {
                    "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}"
                    },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> (filename.endsWith('.log') || filename.equals('versions.yml')) ? null : filename }
            ],
            [
                path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/logs" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.log"
            ]
        ]
    }

    withName: COLLECT_METADATA {
        publishDir = [
            path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${make_pixelgen_outdir(workflow, params)}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            pattern: '*_versions.yml'
        ]
    }
}


def make_pixelgen_outdir(workflow, params) {
    // Function used to generate the an output path on the form:
    // <nf-core-pixelator version>-<pixelator version>/<date>-<sha>/

    pipelineVersion = workflow.manifest.version
    pixelatorVersion = params.pixelator_tag ?: "unknown"
    today = new Date().format("yyyy-MM-dd")

    samplesheetSha = params.samplesheet_sha
    parameterSha = params.sort().toString().digest('sha-1')
    combinedSha = "${samplesheetSha}${parameterSha}".digest("sha-1").substring(0, 6)

    return "nf-core-pixelator-${pipelineVersion}/pixelator-${pixelatorVersion}/${today}-${combinedSha}"
}


profiles {
    test_micro {
        includeConfig 'aws_test_micro.config'
    }
    test_full {
        includeConfig 'aws_test_full.config'
    }
}
