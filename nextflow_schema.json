{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/pixelator/master/nextflow_schema.json",
    "title": "nf-core/pixelator pipeline parameters",
    "description": "Pipeline for analysis of Molecular Pixelation assays",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.(csv|tsv|yml|yaml)$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/pixelator/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "input_basedir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to a local or remote directory that is the \"current working directory\" for relative paths defined in the input samplesheet",
                    "fa_icon": "fas fa-folder"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "amplicon_options": {
            "title": "Amplicon generation options",
            "type": "object",
            "fa_icon": "fas fa-circle",
            "properties": {
                "save_amplicon_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate amplicon reads generated from the raw input reads.",
                    "help": "By default, generated amplicon FastQ files will not be saved to the results directory. Specify this flag (or set it to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "pna_amplicon_options": {
            "title": "Amplicon generation options",
            "type": "object",
            "fa_icon": "fas fa-circle",
            "properties": {
                "save_pna_amplicon_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate amplicon reads generated from the raw input reads.",
                    "help": "By default, generated amplicon FastQ files will not be saved to the results directory. Specify this flag (or set it to `true` in your config file) to copy these files to the results directory when complete."
                },
                "pna_amplicon_mismatches": {
                    "type": "number",
                    "minimum": 0.0,
                    "maximum": 0.5,
                    "description": "The number of mismatches allowed while anchoring reads using LBS sequences (in percentage of seen LBS length) [default: 0.1; 0.0<=x<=0.5]"
                },
                "pna_amplicon_remove_polyg": {
                    "fa_icon": "fas g",
                    "description": "Remove PolyG sequences (length of 10 or more)",
                    "type": "boolean"
                },
                "pna_amplicon_quality_cutoff": {
                    "fa_icon": "fas gauge",
                    "description": "Minimum average quality a read must have. Pass 0 to disable quality filtering.",
                    "type": "integer",
                    "default": 20
                }
            }
        },
        "qc_options": {
            "title": "QC/Filtering/Trimming options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "properties": {
                "trim_front": {
                    "fa_icon": "fas backward-step",
                    "type": "integer",
                    "description": "Trim N bases from the front of the reads",
                    "default": 0
                },
                "trim_tail": {
                    "fa_icon": "fas forward-step",
                    "type": "integer",
                    "description": "Trim N bases from the tail of the reads",
                    "default": 0
                },
                "max_length": {
                    "fa_icon": "fas up-right-and-down-left-from-center",
                    "type": "integer",
                    "description": "The maximum length of a read",
                    "help_text": "Reads longer then given length will be trimmed to the given length. If you set this argument it will overrule the value from the chosen design"
                },
                "min_length": {
                    "fa_icon": "fas down-left-and-up-right-to-center",
                    "type": "integer",
                    "description": "The minimum length (bases) of a read",
                    "help_text": "Reads shorter then given length will be discarded. If you set this argument it will overrule the value from the chosen design."
                },
                "max_n_bases": {
                    "fa_icon": "fas n",
                    "description": "The maximum number of Ns allowed in a read",
                    "help_text": "The default value of 0 means any reads with N in it will be filtered out",
                    "type": "integer",
                    "default": 0
                },
                "avg_qual": {
                    "fa_icon": "fas gauge",
                    "description": "Minimum avg. quality a read must have (0 will disable the filter)",
                    "type": "integer",
                    "default": 20
                },
                "dedup": {
                    "fa_icon": "fas clone",
                    "description": "Remove duplicated reads (exact same sequence)",
                    "type": "boolean"
                },
                "remove_polyg": {
                    "fa_icon": "fas g",
                    "description": "Remove PolyG sequences (length of 10 or more)",
                    "type": "boolean"
                },
                "adapterqc_mismatches": {
                    "fa_icon": "fas not-equal",
                    "description": "The number of mismatches allowed (in percentage) [default: 0.1; 0.0<=x<=0.9]",
                    "type": "number",
                    "default": 0.1,
                    "minimum": 0.0,
                    "maximum": 0.9
                },
                "save_qc_passed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate QC read files containing all reads that passed the filters.",
                    "help": "By default, filtered read FastQ files after QC will not be saved to the results directory. Specify this flag (or set it to `true` in your config file) to copy these files to the results directory when complete."
                },
                "save_qc_failed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate QC read files containing all reads that failed the filters.",
                    "help": "By default, FastQ files with reads that failed QC will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "demux_options": {
            "title": "Demux options",
            "type": "object",
            "properties": {
                "demux_mismatches": {
                    "fa_icon": "fas not-equal",
                    "description": "The number of mismatches allowed (as a fraction)",
                    "type": "number",
                    "default": 0.1,
                    "minimum": 0.0,
                    "maximum": 0.9
                },
                "demux_min_length": {
                    "fa_icon": "fas down-left-and-up-right-to-center",
                    "description": "The minimum length of the barcode that must overlap when matching",
                    "help_text": "If you set this argument it will overrule the value from the chosen design",
                    "type": "integer"
                },
                "save_demux_processed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate QC read files containing all reads that contain valid antibody barcodes.",
                    "help": "By default, FastQ files containing reads with valid antibody barcodes will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "save_demux_failed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate QC read files containing all reads that failed the filters.",
                    "help": "By default, FastQ files containing reads without valid antibody barcodes will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "pna_demux_options": {
            "title": "Demux options for PNA data",
            "type": "object",
            "properties": {
                "pna_demux_mismatches": {
                    "fa_icon": "fas not-equal",
                    "description": "The number of mismatches allowed in marker barcodes.",
                    "type": "number",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 2
                },
                "pna_demux_output_chunk_reads": {
                    "fa_icon": "fas fa-arrows-alt-h",
                    "type": "string",
                    "default": "50M",
                    "description": "The target number of reads in a single file of the partitioned demux output.",
                    "help": "This option can be used to fine-tune the parallelization of the subsequent collapse stage. A smaller value will create split the demux molecule list into more and smaller parts."
                },
                "pna_demux_output_max_chunks": {
                    "fa_icon": "fas fa-arrows-alt-h",
                    "type": "number",
                    "minimum": 1,
                    "maximum": 32,
                    "default": 8,
                    "description": "The maximum number of chunks that the demuxed ouput for each umi region will be split into",
                    "help": "This option is used to control the parallelization of the subsequent collapse stage."
                },
                "pna_demux_strategy": {
                    "fa_icon": "fas fa-code-branch",
                    "description": "The demux and collapsing strategy to use",
                    "default": "independent",
                    "enum": ["paired", "independent"],
                    "type": "string",
                    "help": "**paired:** Use the paired collapsing strategy. This is the default and recommended strategy for PNA data.\n\n**independent:** Use the independent collapsing strategy. This strategy will corrects errors in UMI regions independently. It provides performance benefits but is experimental."
                },
                "save_pna_demux_parquet": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate parquet files containing embeddings of all reads that contain valid antibody barcodes.",
                    "help": "By default, parquet files containing embeddings of reads with valid antibody barcodes will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "save_pna_demux_passed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate FASTQC read files containing all reads that contain valid antibody barcodes.",
                    "help": "By default, FastQ files containing reads with valid antibody barcodes will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "save_pna_demux_failed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save intermediate FASTQC read files containing all reads that do not contain valid antibody barcodes.",
                    "help": "By default, FastQ files containing reads without valid antibody barcodes will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "collapse_options": {
            "title": "Collapse options",
            "type": "object",
            "properties": {
                "markers_ignore": {
                    "fa_icon": "fas fa-list",
                    "description": "A list of comma separated antibodies to discard",
                    "type": "string",
                    "pattern": "(\\S+)?(,\\S+)*"
                },
                "algorithm": {
                    "fa_icon": "fas code-fork",
                    "description": "The algorithm to use for collapsing (adjacency will perform error correction using the number of mismatches given)",
                    "default": "adjacency",
                    "enum": ["adjacency", "unique"],
                    "type": "string"
                },
                "max_neighbours": {
                    "fa_icon": "fas circle-nodes",
                    "description": "The maximum number of neighbors to use when searching for similar sequences. This number depends on the sequence depth and the ratio of erroneous molecules expected. A high value can make the algorithm slower. This is only used when algorithm is set to 'adjacency'",
                    "default": 60,
                    "minimum": 1,
                    "maximum": 250,
                    "type": "integer",
                    "hidden": true
                },
                "collapse_mismatches": {
                    "fa_icon": "fas not-equal",
                    "description": "The number of mismatches allowed when collapsing (adjacency)",
                    "type": "integer",
                    "default": 2,
                    "minimum": 0,
                    "maximum": 5
                },
                "collapse_min_count": {
                    "fa_icon": "fas more-than-equal",
                    "description": "Discard molecules with with a count (reads) lower than this value",
                    "default": 2,
                    "minimum": 1,
                    "type": "integer"
                },
                "save_collapsed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save an intermediate parquet file containing collapsed read information.",
                    "help": "By default, intermediate collapsed reads will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "pna_collapse_options": {
            "title": "Collapse options",
            "type": "object",
            "properties": {
                "pna_collapse_algorithm": {
                    "fa_icon": "fas code-fork",
                    "description": "The algorithm to use for collapsing.",
                    "default": "directional",
                    "enum": ["cluster", "directional"],
                    "type": "string",
                    "help": "**cluster:** Form networks of connected UMIs (based on hamming distance threshold). Each connected component is a read group. In the above example, all the UMIs are contained in a single connected component and thus there is one read group containing all reads, with ACGT as the ‘selected’ UMI.\n\n**directional (default):** Form networks with edges defined based on hamming distance threshold and node A counts >= (2 * node B counts) - 1. Each connected component is a read group, with the node with the highest counts selected as the top node for the component."
                },
                "pna_collapse_mismatches": {
                    "fa_icon": "fas not-equal",
                    "description": "The number of mismatches allowed when collapsing (adjacency)",
                    "type": "integer",
                    "default": 2,
                    "minimum": 0,
                    "maximum": 5
                },
                "save_pna_collapsed_reads": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save an intermediate parquet file containing collapsed read information.",
                    "help": "By default, intermediate collapsed reads will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "graph_options": {
            "title": "Options for pixelator graph command.",
            "type": "object",
            "properties": {
                "multiplet_recovery": {
                    "description": "Activate the multiplet recovery using leiden community detection",
                    "type": "boolean",
                    "default": true
                },
                "graph_max_refinement_recursion_depth": {
                    "fa_icon": "fas less-than-equal",
                    "description": "The number of times a component can be broken down into smaller components during the multiplet recovery process.",
                    "type": "integer",
                    "default": 5,
                    "minimum": 1,
                    "maximum": 100,
                    "hidden": true
                },
                "graph_max_edges_to_split": {
                    "fa_icon": "fas less-than-equal",
                    "description": "Maximum number of edges between the produced components as a result of a component split operation during the multiplet recovery process.",
                    "type": "integer",
                    "default": 5,
                    "minimum": 1,
                    "maximum": 1000,
                    "hidden": true
                },
                "graph_min_count": {
                    "fa_icon": "fas less-than-equal",
                    "description": "Discard edges (pixels) with a count (reads) lower than this, use 1 to disable",
                    "type": "integer",
                    "default": 2,
                    "minimum": 1,
                    "maximum": 50,
                    "hidden": true
                },
                "save_edgelist": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save an intermediate CSV file containing the unfiltered graph edge list.",
                    "help": "By default, the unfiltered edge list will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "annotate_options": {
            "title": "Options for pixelator annotate command.",
            "type": "object",
            "properties": {
                "min_size": {
                    "description": "The minimum size (pixels) a component/cell can have (disabled by default)",
                    "type": "integer"
                },
                "max_size": {
                    "description": "The maximum size (pixels) a component/cell can have (disabled by default)",
                    "type": "integer"
                },
                "dynamic_filter": {
                    "description": "Enable the estimation of dynamic size filters using a log-rank approach.",
                    "help_text": "Following options are available:\n- both: estimates both minimum and maximum component size\n- min: estimates the minimum component size (or uses {MINIMUM_N_EDGES_CELL_SIZE} edges, whichever is smallest)\n- max: estimates the maximum component size.\n\nNote that this cannot be set at the same time as `--min-size` or `--max-size`.",
                    "type": "string",
                    "enum": ["both", "min", "max"],
                    "default": "min"
                },
                "aggregate_calling": {
                    "description": "Enable aggregate calling, information on potential aggregates will be added to the output data",
                    "type": "boolean",
                    "default": true
                },
                "save_raw_component_metrics": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save the raw_component_metrics.csv file from the annotate stage.",
                    "help": "By default, the raw_component_metrics CSV file after annotate will not be saved to the results directory. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "save_annotate_dataset": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save the PXL dataset after the annotate stage.",
                    "help": "By default, the PXL file after annotate will not be saved to the results directory unless `--skip_analysis` and `--skip_layout` is passed. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "pna_graph_options": {
            "title": "Options for pixelator graph command on PNA data.",
            "type": "object",
            "properties": {
                "save_pna_graph_pixelfile": {
                    "type": "boolean",
                    "default": false,
                    "description": "Save the PXL dataset after the graph stage.",
                    "help": "By default, the PXL file after graph will not be saved to the results directory unless `--skip_analysis` and `--skip_layout` is passed. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "pna_graph_multiplet_recovery": {
                    "description": "Activate the multiplet recovery using leiden community detection",
                    "type": "boolean",
                    "default": true
                },
                "pna_graph_leiden_iterations": {
                    "type": "number",
                    "default": 1,
                    "description": "Number of iterations for the leiden algorithm.",
                    "help": "High values will decrease the variance of the results but increase the runtime"
                },
                "pna_graph_initial_stage_leiden_resolution": {
                    "default": 1.0,
                    "minimum": 0.0,
                    "type": "number",
                    "description": "The resolution parameter for the leiden algorithm at the initial stage.",
                    "help": "This should typically be set higher than the refinement stage resolution."
                },
                "pna_graph_refinement_stage_leiden_resolution": {
                    "default": 0.01,
                    "minimum": 0.0,
                    "type": "number",
                    "description": "The resolution parameter for the leiden algorithm at the refinement stage.",
                    "help": "This should typically be set lower than the initial stage resolution."
                },
                "pna_graph_min_count": {
                    "default": 1,
                    "maximum": 50,
                    "minimum": 0,
                    "type": "number",
                    "description": "Discard edges with a read count below given value. Set to 1 to disable filtering."
                },
                "pna_graph_min_component_size_in_refinement": {
                    "type": "number",
                    "default": 1000,
                    "minimum": 1,
                    "description": "The minimum component size to consider for refinement"
                },
                "pna_graph_max_refinement_recursion_depth": {
                    "type": "number",
                    "default": 5,
                    "minimum": 1,
                    "maximum": 100,
                    "description": "The maximum recursion depth for the refinement algorithm. Set to 1 to disable refinement."
                },
                "pna_graph_initial_stage_max_edges_to_remove": {
                    "type": "number",
                    "minimum": 1,
                    "description": "The maximum number of edges to remove between components during the initial stage (iteration == 0) of multiplet recovery."
                },
                "pna_graph_refinement_stage_max_edges_to_remove": {
                    "type": "number",
                    "default": 4,
                    "minimum": 1,
                    "description": "The maximum number of edges to remove between components during the refinement stage (iteration > 0) of multiplet recovery."
                },
                "pna_graph_initial_stage_max_edges_to_remove_relative": {
                    "type": "number",
                    "minimum": 0.0,
                    "description": "The maximum number of edges to remove between two components relative to the number of nodes in the smaller of the two when during the initial stage (iteration == 0) of multiplet recovery."
                },
                "pna_graph_refinement_stage_max_edges_to_remove_relative": {
                    "type": "number",
                    "minimum": 0.0,
                    "description": "The maximum number of edges to remove between two components relative to the number of nodes in the smaller of the two when during the refinement stage (iteration > 0) of multiplet recovery."
                },
                "pna_graph_graph_min_component_size_to_prune": {
                    "type": "number",
                    "minimum": 1,
                    "default": 100,
                    "description": "The minimum number of nodes in an potential new components in order for it to be pruned."
                },
                "pna_graph_component_size_min_threshold": {
                    "type": "number",
                    "minimum": 1,
                    "description": "Components with fewer nodes than this will be filtered from the output data. This is typically not needed. Setting this will disable the automatic size filtering."
                }
            }
        },
        "pna_denoise_options": {
            "title": "Options for pixelator denoise command.",
            "type": "object",
            "properties": {
                "skip_denoise": {
                    "description": "Skip denoise step",
                    "type": "boolean"
                },
                "save_pna_denoise_pixelfile": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save the PXL dataset after the denoise stage.",
                    "help": "By default, the PXL file after denoise will not be saved to the results directory."
                },
                "pna_denoise_run_one_core_graph_denoising": {
                    "description": "Activate the one-core graph denoising algorithm",
                    "type": "boolean",
                    "default": true
                },
                "pna_denoise_pval_threshold": {
                    "type": "number",
                    "description": "The p-value threshold for the a marker to be considered significantly over-expressed in the one-core layer of a component",
                    "default": 0.05,
                    "minimum": 0.0
                },
                "pna_denoise_inflate_factor": {
                    "type": "number",
                    "description": "The inflate factor for the number of nodes from over-expressed markers to be removed from the one-core layer of a component",
                    "default": 1.5,
                    "minimum": 1.0
                }
            }
        },
        "analysis_options": {
            "title": "Options for pixelator analysis command.",
            "type": "object",
            "properties": {
                "skip_analysis": {
                    "description": "Skip analysis step",
                    "type": "boolean"
                },
                "compute_polarization": {
                    "description": "Compute polarization scores matrix (clusters by markers)",
                    "type": "boolean",
                    "default": true
                },
                "compute_colocalization": {
                    "description": " Compute colocalization scores (marker by marker) for each component",
                    "type": "boolean",
                    "default": true
                },
                "use_full_bipartite": {
                    "description": "Use the bipartite graph instead of the one-node projection when computing polarization, coabundance and colocalization scores",
                    "type": "boolean"
                },
                "polarization_transformation": {
                    "description": "Which transformation to use for the antibody counts when calculating polarity scores.",
                    "help_text": "- `raw`: use the raw counts.\n- `log1p`: use the log1p-transformed counts.\n",
                    "type": "string",
                    "enum": ["raw", "log1p"],
                    "default": "log1p"
                },
                "polarization_n_permutations": {
                    "type": "integer",
                    "description": "Set the number of permutations use to compute the empirical z- and p-values for the polarity score",
                    "default": 50,
                    "minimum": 5
                },
                "polarization_min_marker_count": {
                    "type": "integer",
                    "description": "The minimum number of counts of a marker to calculate the polarity score in the component",
                    "default": 5,
                    "minimum": 2
                },
                "colocalization_transformation": {
                    "type": "string",
                    "enum": ["raw", "log1p", "rate-diff"],
                    "default": "rate-diff",
                    "description": "Select the type of transformation to use on the node by antibody counts matrix when computing colocalization"
                },
                "colocalization_neighbourhood_size": {
                    "type": "integer",
                    "description": "Select the size of the neighborhood to use when computing colocalization metrics on each component",
                    "default": 1,
                    "minimum": 0
                },
                "colocalization_n_permutations": {
                    "type": "integer",
                    "description": "Set the number of permutations use to compute the empirical p-value for the colocalization score",
                    "default": 50,
                    "minimum": 5
                },
                "colocalization_min_region_count": {
                    "type": "integer",
                    "description": "The minimum number of counts in a region for it to be considered valid for computing colocalization",
                    "default": 5,
                    "minimum": 0
                },
                "colocalization_min_marker_count": {
                    "type": "integer",
                    "description": "The minimum number of counts in a component for it to be considered valid for computing colocalization",
                    "default": 5,
                    "minimum": 0
                },
                "save_analysis_dataset": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save the PXL dataset after the analysis stage.",
                    "help": "By default, the PXL dataset after the analysis stage will only be saved be saved when `--skip_layout` is passed. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                }
            }
        },
        "pna_analysis_options": {
            "title": "Options for pixelator analysis command.",
            "type": "object",
            "properties": {
                "save_pna_analysis_pixelfile": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save the PXL dataset after the analysis stage.",
                    "help": "By default, the PXL dataset after the analysis stage will only be saved be saved when `--skip_layout` is passed. Specify this flag (or set to `true` in your config file) to copy these files to the results directory when complete."
                },
                "pna_analysis_compute_proximity": {
                    "description": "Compute proximity scores",
                    "type": "boolean",
                    "default": true
                },
                "pna_analysis_compute_k_cores": {
                    "description": "Compute k-core summary tables for each component",
                    "type": "boolean"
                },
                "pna_analysis_proximity_nbr_of_permutations": {
                    "type": "integer",
                    "description": "Number of permutations to use when computing the expected proximity scores",
                    "default": 100,
                    "minimum": 50
                },
                "pna_analysis_compute_svd_var_explained": {
                    "description": "Compute the variance explained by the SVD components",
                    "type": "boolean",
                    "default": true
                },
                "pna_analysis_svd_nbr_of_pivots": {
                    "type": "integer",
                    "description": "Number of pivots to use for the SVD decomposition",
                    "default": 50,
                    "minimum": 10,
                    "maximum": 200
                }
            }
        },
        "layout_options": {
            "title": "Options for pixelator layout command.",
            "type": "object",
            "properties": {
                "skip_layout": {
                    "description": "Skip layout step",
                    "type": "boolean"
                },
                "no_node_marker_counts": {
                    "description": "Skip adding marker counts to the layout.",
                    "type": "boolean",
                    "default": false
                },
                "layout_algorithm": {
                    "description": "Select a layout algorithm to use. This can be specified as a comma separated list to compute multiple layouts. Possible values are: fruchterman_reingold, fruchterman_reingold_3d, kamada_kawai, kamada_kawai_3d, pmds, pmds_3d, wpmds, wpmds_3d",
                    "type": "string",
                    "enum": [
                        "fruchterman_reingold",
                        "fruchterman_reingold_3d",
                        "kamada_kawai",
                        "kamada_kawai_3d",
                        "pmds",
                        "pmds_3d",
                        "wpmds",
                        "wpmds_3d"
                    ],
                    "default": "wpmds_3d"
                }
            }
        },
        "pna_layout_options": {
            "title": "Options for pixelator single-cell-pna layout command.",
            "type": "object",
            "properties": {
                "pna_layout_no_node_marker_counts": {
                    "description": "Skip adding marker counts to the layout.",
                    "type": "boolean",
                    "default": false
                },
                "pna_layout_layout_algorithm": {
                    "description": "Select a layout algorithm to use. This can be specified as a comma separated list to compute multiple layouts. Possible values are: pmds, pmds_3d, wpmds, wpmds_3d.",
                    "type": "string",
                    "enum": ["pmds_3d", "wpmds_3d"],
                    "default": "wpmds_3d"
                },
                "pna_layout_pmds_pivots": {
                    "type": "integer",
                    "description": "Number of pivots to use for the PMDS layout algorithm. Default: 50. More gives better results, but increases computation time.",
                    "default": 50,
                    "minimum": 50
                },
                "pna_layout_wpmds_k": {
                    "type": "integer",
                    "description": "The window size used when computing probability weights for the wpmds layout method. Only used when layout algorithm is set to wpmds.",
                    "default": 5,
                    "minimum": 1,
                    "maximum": 10
                }
            }
        },
        "report_options": {
            "title": "Options for pixelator report command.",
            "type": "object",
            "properties": {
                "skip_report": {
                    "description": "Skip report generation",
                    "type": "boolean"
                }
            }
        },
        "global_config_options": {
            "title": "Global options",
            "type": "object",
            "description": "Global configuration options specific to nf-core/pixelator.",
            "properties": {
                "pixelator_container": {
                    "type": "string",
                    "description": "Override the container image reference to use for all steps using the `pixelator` command.",
                    "help_text": "Use this to force the pipeline to use a different image version in all steps that use the pixelator command.\nThe pipeline is not guaranteed to work when using different pixelator versions."
                },
                "save_all": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": false,
                    "description": "Save all intermediate results.",
                    "help": "This option is equivalent of passing all: `--save_* and --save_pna_*` options."
                },
                "save_json": {
                    "fa_icon": "fas fa-save",
                    "type": "boolean",
                    "default": true,
                    "description": "Save all JSON report and metadata files generated by pixelator."
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/pixelator/",
                    "hidden": true
                },
                "trace_report_suffix": {
                    "type": "string",
                    "fa_icon": "far calendar",
                    "description": "Suffix to add to the trace report filename. Default is the date and time in the format yyyy-MM-dd_HH-mm-ss.",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/amplicon_options"
        },
        {
            "$ref": "#/$defs/pna_amplicon_options"
        },
        {
            "$ref": "#/$defs/qc_options"
        },
        {
            "$ref": "#/$defs/demux_options"
        },
        {
            "$ref": "#/$defs/pna_demux_options"
        },
        {
            "$ref": "#/$defs/collapse_options"
        },
        {
            "$ref": "#/$defs/pna_collapse_options"
        },
        {
            "$ref": "#/$defs/graph_options"
        },
        {
            "$ref": "#/$defs/pna_graph_options"
        },
        {
            "$ref": "#/$defs/pna_denoise_options"
        },
        {
            "$ref": "#/$defs/annotate_options"
        },
        {
            "$ref": "#/$defs/analysis_options"
        },
        {
            "$ref": "#/$defs/pna_analysis_options"
        },
        {
            "$ref": "#/$defs/layout_options"
        },
        {
            "$ref": "#/$defs/pna_layout_options"
        },
        {
            "$ref": "#/$defs/report_options"
        },
        {
            "$ref": "#/$defs/global_config_options"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        }
    ]
}
